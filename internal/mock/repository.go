// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	reflect "reflect"

	model "github.com/DrGermanius/Gophermart/internal/model"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CheckCredentials mocks base method.
func (m *MockIRepository) CheckCredentials(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCredentials", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCredentials indicates an expected call of CheckCredentials.
func (mr *MockIRepositoryMockRecorder) CheckCredentials(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCredentials", reflect.TypeOf((*MockIRepository)(nil).CheckCredentials), arg0, arg1, arg2)
}

// GetBalanceByUserID mocks base method.
func (m *MockIRepository) GetBalanceByUserID(arg0 context.Context, arg1 int) (model.BalanceWithdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(model.BalanceWithdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockIRepositoryMockRecorder) GetBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockIRepository)(nil).GetBalanceByUserID), arg0, arg1)
}

// GetOrderByNumber mocks base method.
func (m *MockIRepository) GetOrderByNumber(arg0 context.Context, arg1 string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", arg0, arg1)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockIRepositoryMockRecorder) GetOrderByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockIRepository)(nil).GetOrderByNumber), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockIRepository) GetOrders(arg0 context.Context, arg1 int) ([]model.OrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]model.OrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIRepositoryMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIRepository)(nil).GetOrders), arg0, arg1)
}

// GetWithdrawHistory mocks base method.
func (m *MockIRepository) GetWithdrawHistory(arg0 context.Context, arg1 int) ([]model.WithdrawOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawHistory", arg0, arg1)
	ret0, _ := ret[0].([]model.WithdrawOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawHistory indicates an expected call of GetWithdrawHistory.
func (mr *MockIRepositoryMockRecorder) GetWithdrawHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawHistory", reflect.TypeOf((*MockIRepository)(nil).GetWithdrawHistory), arg0, arg1)
}

// IsUserExist mocks base method.
func (m *MockIRepository) IsUserExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockIRepositoryMockRecorder) IsUserExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockIRepository)(nil).IsUserExist), arg0, arg1)
}

// MakeAccrual mocks base method.
func (m *MockIRepository) MakeAccrual(arg0 context.Context, arg1 int, arg2, arg3 string, arg4, arg5 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAccrual", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeAccrual indicates an expected call of MakeAccrual.
func (mr *MockIRepositoryMockRecorder) MakeAccrual(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAccrual", reflect.TypeOf((*MockIRepository)(nil).MakeAccrual), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Register mocks base method.
func (m *MockIRepository) Register(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIRepositoryMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIRepository)(nil).Register), arg0, arg1, arg2)
}

// SendOrder mocks base method.
func (m *MockIRepository) SendOrder(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrder indicates an expected call of SendOrder.
func (mr *MockIRepositoryMockRecorder) SendOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrder", reflect.TypeOf((*MockIRepository)(nil).SendOrder), arg0, arg1, arg2)
}

// UpdateOrderStatus mocks base method.
func (m *MockIRepository) UpdateOrderStatus(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIRepositoryMockRecorder) UpdateOrderStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIRepository)(nil).UpdateOrderStatus), arg0, arg1, arg2)
}

// Withdraw mocks base method.
func (m *MockIRepository) Withdraw(arg0 context.Context, arg1 model.WithdrawInput, arg2 model.BalanceWithdrawn, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIRepositoryMockRecorder) Withdraw(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIRepository)(nil).Withdraw), arg0, arg1, arg2, arg3)
}
