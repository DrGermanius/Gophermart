// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	reflect "reflect"

	model "github.com/DrGermanius/Gophermart/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetBalanceByUserID mocks base method.
func (m *MockIService) GetBalanceByUserID(arg0 context.Context, arg1 int) (model.BalanceWithdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(model.BalanceWithdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockIServiceMockRecorder) GetBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockIService)(nil).GetBalanceByUserID), arg0, arg1)
}

// GetJWTToken mocks base method.
func (m *MockIService) GetJWTToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWTToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWTToken indicates an expected call of GetJWTToken.
func (mr *MockIServiceMockRecorder) GetJWTToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWTToken", reflect.TypeOf((*MockIService)(nil).GetJWTToken), arg0)
}

// GetOrders mocks base method.
func (m *MockIService) GetOrders(arg0 context.Context, arg1 int) ([]model.OrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]model.OrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIServiceMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIService)(nil).GetOrders), arg0, arg1)
}

// GetWithdrawHistory mocks base method.
func (m *MockIService) GetWithdrawHistory(arg0 context.Context, arg1 int) ([]model.WithdrawOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawHistory", arg0, arg1)
	ret0, _ := ret[0].([]model.WithdrawOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawHistory indicates an expected call of GetWithdrawHistory.
func (mr *MockIServiceMockRecorder) GetWithdrawHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawHistory", reflect.TypeOf((*MockIService)(nil).GetWithdrawHistory), arg0, arg1)
}

// Login mocks base method.
func (m *MockIService) Login(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIServiceMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIService)(nil).Login), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockIService) Register(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIServiceMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIService)(nil).Register), arg0, arg1, arg2)
}

// SendOrder mocks base method.
func (m *MockIService) SendOrder(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrder indicates an expected call of SendOrder.
func (mr *MockIServiceMockRecorder) SendOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrder", reflect.TypeOf((*MockIService)(nil).SendOrder), arg0, arg1, arg2)
}

// Withdraw mocks base method.
func (m *MockIService) Withdraw(arg0 context.Context, arg1 model.WithdrawInput, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIServiceMockRecorder) Withdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIService)(nil).Withdraw), arg0, arg1, arg2)
}
